@model app.Models.Product

@{
    ViewBag.Title = "Chỉnh Sửa Sản Phẩm";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section header {
    Chỉnh Sửa Sản Phẩm
}

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                Chỉnh sửa thông tin sản phẩm
            </div>
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }
            <div class="panel-body">
                <div class="row">
                    <div class="col-lg-6">
                        <form asp-action="Edit" method="post" enctype="multipart/form-data">
                            @Html.AntiForgeryToken()

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.Id)

                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Code, new { @class = "control-label col-md-2" })
                                @Html.TextBoxFor(model => model.Code, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Price, new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Quantity, new { @class = "control-label col-md-2" })
                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="ImageUrl">Product Image</label>
                                <input type="file" id="imageInput" name="ImageUrl" class="form-control" />

                                <img id="productImage" src="@Model.Image" alt="Product Image" style="max-width: 200px;" />
                            </div>
                            <div class="form-group">
                                <label for="OtherImageUrls">Other Images</label>
                                <input id="imagesInput" type="file" name="OtherImageUrls" multiple class="form-control" />
                                <div id="productImages" class="row">
                                    @using System.Xml.Linq
                                    @{
                                        // Phân tích cú pháp chuỗi XML từ thuộc tính MoreImages
                                        var imagesXml = XElement.Parse(Model.MoreImages);

                                        // Lấy tất cả các phần tử <image>
                                        var imagePaths = imagesXml.Elements("image").Select(element => element.Value);
                                    }


                                    @foreach (var imagePath in imagePaths)
                                    {
                                    // Thay thế '~/' bằng đường dẫn gốc của ứng dụng web của bạn nếu cần

                                        <div class="col-md-4">
                                            <img src="@imagePath.Replace("~/", "/")" alt="Image" style="height:300px; width:200px" />
                                        </div>
                                        
                                    }
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Lưu thay đổi" class="btn btn-default" />
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Trở về danh sách", "Index")
</div>
<script>
    // Thêm sự kiện 'change' cho trường nhập file
    document.getElementById('imageInput').addEventListener('change', function () {
        // Lấy đối tượng hình ảnh
        var img = document.getElementById('productImage');
        // Lấy file đã chọn
        var file = this.files[0];

        // Kiểm tra xem có file được chọn không
        if (file) {
            // Tạo đường dẫn tạm thời cho ảnh
            var imageURL = URL.createObjectURL(file);
            // Cập nhật thuộc tính 'src' của thẻ img
            img.src = imageURL;
        } else {
            // Nếu không có file được chọn, sử dụng ảnh cũ
            img.src = "@Model.Image";
        }
    });


    document.getElementById('imagesInput').onchange = function (e) {
        var previewImagesDiv = document.getElementById('productImages');
        previewImagesDiv.innerHTML = ''; // Xóa bất kỳ ảnh nào đã hiển thị trước đó

        var files = e.target.files;
        for (var i = 0; i < files.length; i++) {
            var reader = new FileReader();
            reader.onload = function (event) {
                var img = document.createElement('img');
                img.src = event.target.result;
                img.style.width = '200px'; // Thiết lập kích thước ảnh
                img.style.height = '300px';

                var div = document.createElement('div');
                div.setAttribute('class', 'col-md-4');
                div.appendChild(img);
                previewImagesDiv.appendChild(div);
            }
            reader.readAsDataURL(files[i]);
        }
    }
</script>
